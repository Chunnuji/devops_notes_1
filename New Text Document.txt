import PyPDF2

# Function to extract text from PDF
def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, "rb") as f:
        reader = PyPDF2.PdfFileReader(f)
        num_pages = reader.numPages
        for page_num in range(num_pages):
            page = reader.getPage(page_num)
            text += page.extract_text()
    return text

# Example usage:
input_pdf = "input.pdf"
extracted_text = extract_text_from_pdf(input_pdf)

# Print extracted text (for verification)
print(extracted_text)

# Function to update PDF with new text
def update_pdf_with_text(input_pdf, output_pdf, updated_text):
    with open(input_pdf, "rb") as f:
        reader = PyPDF2.PdfFileReader(f)
        writer = PyPDF2.PdfFileWriter()

        # Copy all pages from input to output
        for page_num in range(reader.numPages):
            page = reader.getPage(page_num)
            writer.addPage(page)

        # Add updated text to a new page
        new_page = PyPDF2.pdf.PageObject.createBlankPage()
        new_page.mergePage(PyPDF2.pdf.PageObject.createTextObject(updated_text))
        writer.addPage(new_page)

        # Write the updated content to output PDF file
        with open(output_pdf, "wb") as out_f:
            writer.write(out_f)

# Example usage:
output_pdf = "output.pdf"
update_pdf_with_text(input_pdf, output_pdf, extracted_text)





from docx import Document

def replace_text_in_docx(doc_path, search_text, replace_text):
    doc = Document(doc_path)
    
    for p in doc.paragraphs:
        if search_text in p.text:
            inline = p.runs
            # Replace strings and retain the same style
            for i in range(len(inline)):
                if search_text in inline[i].text:
                    text = inline[i].text.replace(search_text, replace_text)
                    inline[i].text = text
    
    doc.save(doc_path)

# Example usage:
doc_file = 'path_to_your_document.docx'
search_text = 'OldText'
replace_text = 'NewText'

replace_text_in_docx(doc_file, search_text, replace_text)



















from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Open an existing document
doc = Document('Edit.docx')

# Access the first paragraph and modify its text and formatting
first_paragraph = doc.paragraphs[3]
first_paragraph.text = 'Updated Text'
run = first_paragraph.runs[0]
run.bold = True
run.italic = True
run.font.size = Pt(16)
first_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

# Add a new heading
# doc.add_heading('New Section', level=1)

# Add a new paragraph with a hyperlink
new_paragraph = doc.add_paragraph('Visit our website: ')
# run = new_paragraph.add_run('www.example.com')
# run.hyperlink.address = 'https://www.example.com'

# # Add a new table
# doc.add_heading('Table Section', level=2)
# table = doc.add_table(rows=4, cols=4)
# table.style = 'Table Grid'
# table.autofit = False
# table.allow_autofit = False
# for row in table.rows:
#     for cell in row.cells:
#         cell.width = Pt(100)
# table.cell(0, 0).text = 'Name'
# table.cell(0, 1).text = 'Age'
# table.cell(0, 2).text = 'City'
# for i, data in enumerate([('David', '28', 'London'), ('Emma', '35', 'New York'), ('John', '22', 'Los Angeles')], start=1):
#     table.cell(i, 0).text = data[0]
#     table.cell(i, 1).text = data[1]
#     table.cell(i, 2).text = data[2]

# Save the modified document
doc.save('modified_document1.docx')














import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;

import java.time.Duration;

@Configuration
@EnableCaching
public class RedisCacheConfig {

    @Bean
    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
        RedisCacheConfiguration cacheConfiguration = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofHours(1)) // Set cache entry TTL to 1 hour
                .serializeKeysWith(
                        RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(
                        RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));

        return RedisCacheManager.builder(redisConnectionFactory)
                .cacheDefaults(cacheConfiguration)
                .build();
    }
}
///////////////////////

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.cache.CacheManager;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;
import org.springframework.core.io.ClassPathResource;

@Configuration
@EnableCaching
public class EhCacheConfig {

    @Bean
    public CacheManager cacheManager() {
        return new EhCacheCacheManager(ehCacheCacheManager().getObject());
    }

    @Bean
    public EhCacheManagerFactoryBean ehCacheCacheManager() {
        EhCacheManagerFactoryBean factoryBean = new EhCacheManagerFactoryBean();
        factoryBean.setConfigLocation(new ClassPathResource("ehcache.xml"));
        factoryBean.setShared(true);
        return factoryBean;
    }
}
///////////////////////////////////////


<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.ehcache.org/v3"
        xsi:schemaLocation="http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core.xsd">

    <!-- Default cache configuration -->
    <cache alias="defaultCache">
        <expiry>
            <ttl unit="minutes">60</ttl>
        </expiry>
        <heap unit="entries">100</heap>
    </cache>

    <!-- Cache for products with custom configuration -->
    <cache alias="products">
        <expiry>
            <ttl unit="minutes">30</ttl> <!-- Set TTL to 30 minutes -->
        </expiry>
        <heap unit="entries">200</heap> <!-- Limit to 200 entries -->
    </cache>

</config>



import java.text.ParseException;
import java.text.SimpleDateFormat;

public class DateFormatChecker {

    // Method to check if the date matches the given format
    public static boolean isValidDate(String date, String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        sdf.setLenient(false);  // Disallow lenient parsing (no "forgiving" of invalid dates)

        try {
            // Try parsing the date string
            sdf.parse(date);
            return true;
        } catch (ParseException e) {
            // If an exception is thrown, the date is not valid for the given format
            return false;
        }
    }

    public static void main(String[] args) {
        String dateToCheck = "2024-11-06";  // Example date
        String format = "yyyy-MM-dd";       // Expected format

        // Check if the date matches the format
        boolean isValid = isValidDate(dateToCheck, format);
        
        if (isValid) {
            System.out.println("The date is valid!");
        } else {
            System.out.println("The date is invalid!");
        }
    }
}



import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.DefaultResponseErrorHandler;
import java.io.IOException;

public class CustomResponseErrorHandler extends DefaultResponseErrorHandler {

    @Override
    public void handleError(ClientHttpResponse response) throws IOException {
        if (response.getStatusCode().is4xxClientError()) {
            // Handle 4xx errors specifically
            throw new CustomClientException("4xx error: " + response.getStatusCode());
        } else if (response.getStatusCode().is5xxServerError()) {
            // Handle 5xx errors specifically
            throw new CustomServerException("5xx error: " + response.getStatusCode());
        } else {
            super.handleError(response);
        }
    }
}






import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setErrorHandler(new CustomResponseErrorHandler());
        return restTemplate;
    }
}











